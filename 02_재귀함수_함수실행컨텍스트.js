// 🟦 재귀함수 

    // 의미
        // 함수가 자기 자신을 호출하는 함수

    // 예시 
        // function add () {
        //     add()
        // }

    // 특징 
        // 쓸일은 그렇게 많지 않은데, '알고리즘 문제' 풀 때, 가끔 사용
        // '임시로 데이터 베이스에 추가' 할 때에 사용할 수 있음 


    function add(n) {
        // 코드가 얼마나 반복되어 실행 시킬 것 인지!
        if(n < 5) {
            add(n+1);
            console.log(n);
        }
    }

    add(0)
        // [실행 결과]⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐ 
            // 왜 거꾸로 나올까? 

            // 함수의 실행 컨텍스트 때문 
                // 즉, add -> add2 -> add3 -> add4 
                // add4 실행이 끝나고 -> add3 실행이 되고, 그 다음에 add3 이 끝나고 -> add2 실행 후 -> add 실행 끝

            // [내 생각]
                // 매개변수로 0 이 들어가면서 add 함수 실행 > if 문에서 5보다 작으니 { } 중괄호가 실행 > add(1) 이 되고 
                    // > ⭐⭐⭐ 그 다음 1) console.log(0) 이 아니라 2) add(1) 으로 넘어감 
                // add(1) 실행되니까 > 매개변수로 1이 들어가면서, add 함수 실행 > if 문 조건 확인하면 n<5 이까, { } 중괄호가 실행 >  add(2) 이 된다. 
                    // 그 다음 1) console.log 로 넘어가지 않고 2) add(2) 를 실행하게 됨. ⭐⭐⭐⭐⭐⭐⭐⭐ 
                // 반복되면, add(5) 가 들어가면, 막히는게 없고, 1) 근데 if (n<5) 에 걸리고 2) 그래서, add(4) 부터 실행된다. > 그 다음 add(3) > add(2) > add(1) > add(0)


        // [수업정리] ⭐⭐⭐⭐⭐ (실행 컨텍스트는 꼭 숙지) ⭐⭐⭐⭐⭐⭐⭐⭐ 
            // 함수가 호출되면 > 실행컨텍스트가 생성되고 
            // 함수의 함수 안에서 함수를 호출하면서 > 실행 컨텍스트가 쌓이고 
            // 뒤에서 부터, 실행하고, 실행하고, 실행컨텍스트 제거
            // stack 임 
                // call stack 에 순서대로 쌓이고 > 뒤에서 부터 제거 ⭐⭐⭐⭐⭐ 
                // 그래서 거꾸로 나오는 것 임.


// 🟦 재귀함수를 더 써보자 
    // 피보나치 수열을 재귀함수를 사용해서 만들자 

    // 피보나치 수열이란? 
        // 피보나치 수열, 수학적 성질 
        // 연속된 두 항의 비율
        // 황금비 
        // 0, 1, 1, 2, 3, 5, 8, 13, 21, ..  
        // 이전 두 항의 합으로 만들어진 수열
        // 재귀함수를 사용해서 피보나치 수열을 만듦
            // 본인이 본인을 호출하는 함수 ⭐⭐⭐ 
    
    function fibonacci(n) {
        if (n < 2) return n;
        // 이전 두 항을 더해서 반환
        return fibonacci(n-1) + fibonacci(n-2);
    }

    for (let i = 0; i < 20; i++) {
        console.log(fibonacci(i))
    }














